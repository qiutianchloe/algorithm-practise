/*
 * Problem 1 in Assignment 2
 * COMP20007 Design of Algorithms
 * Semester 1 2019
 *
 * Written by: [ YOUR NAME HERE ]
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* --- DO NOT CHANGE THE CODE BELOW THIS LINE --- */

void problem_1_a();
void problem_1_b();
void print_usage_and_exit(char **argv);
int* buildmaxheap(int a[], int n);
void maxheapify(int a[], int i, int heapsize);
int* buildmaxheap2(int a[], int n);
void maxheapify2(int a[], int i, int heapsize);

int main(int argc, char **argv) {

    if (argc != 2) {
        print_usage_and_exit(argv);
    }

    /* If the argument provided is "a" then run problem_1_a(),
    * run problem_1_b() for "b", and fail otherwise. */
    if (strcmp(argv[1], "a") == 0) {
        problem_1_a();
    }
    else if (strcmp(argv[1], "b") == 0) {
        problem_1_b();
    } else {
        print_usage_and_exit(argv);
    }
    return 0;
}

/* Print the usage information and exit the program. */
void print_usage_and_exit(char **argv) {
    fprintf(stderr, "usage: %s [ab]\n", argv[0]);
    exit(EXIT_FAILURE);
}

/* --- DO NOT CHANGE THE CODE ABOVE THIS LINE --- */

/* TODO: Implement your solution to Problem 1.a. in this function. */
void problem_1_a() {
    int size, value_read, i; 
    scanf("%d\n", &size); 
    int heap[size]; 
    for (i = 0; i<size; i++){
        value_read = scanf("%d\n", &heap[i]); 
        if(!value_read){
            fprintf(stderr, "Error: invalid input format\n"); 
            exit(EXIT_FAILURE); 
        }
    } 
    int* newHeap; 
    newHeap = buildmaxheap(heap, size); 

    for(i=0; i<size; i++){
        printf("%d\n", newHeap[i]); 
    }
}


int* buildmaxheap(int a[], int n)
{
    int heapsize = n;
    int j;
    for (j = n/2; j >= 0; j--) {
        maxheapify(a, j, heapsize);
    }
    return a;
}
void maxheapify(int a[], int i, int heapsize)
{
    int temp, largest, left, right;
    left = (2*i+1);
    right = ((2*i)+2);
    if (left >= heapsize)
        return;
    else {
        if (left < (heapsize) && a[left] > a[i]) 
            largest = left;
        else
            largest = i;
        if (right < (heapsize) && a[right] > a[largest])  
            largest = right;
        if (largest != i) {
            temp = a[i];
            a[i] = a[largest];
            a[largest] = temp;
            maxheapify(a, largest, heapsize);
        }
    }
}

/* TODO: Implement your solution to Problem 1.b. in this function. */
void problem_1_b() {
        int size, value_read, i; 
    scanf("%d\n", &size); 
    int heap[size]; 
    for (i = 0; i<size; i++){
        value_read = scanf("%d\n", &heap[i]); 
        if(!value_read){
            fprintf(stderr, "Error: invalid input format\n"); 
            exit(EXIT_FAILURE); 
        }
    } 
    int* newHeap; 
    newHeap = buildmaxheap2(heap, size); 

    for(i=0; i<size; i++){
        printf("%d\n", newHeap[i]); 
    }
}
int* buildmaxheap2(int a[], int n)
{
    int heapsize = n;
    int j;
    for (j = n/2; j >= 0; j--) {
        maxheapify2(a, j, heapsize);
    }
    return a;
}
void maxheapify2(int a[], int i, int heapsize)
{
    int temp, largest, left, right, temp2, smallest;
    left = (2*i+1);
    right = ((2*i)+2);
    if (left >= heapsize)
        return;
    else {
        if (left < (heapsize) && a[left] > a[i]){
            largest = left;
            smallest = i; 
        }else{
            largest = i;
            smallest = left; 
        }
        if (right < (heapsize) && a[right] > a[largest])  
            largest = right;
        if(right < (heapsize) && a[right] < a[smallest]){
            smallest = right; 
        }
        if (largest == i) {
            // the largest element is at the right position
            if(smallest == left){
                //everthing is done
            }else{
                //this is better, only have to change the position of left sub tree and right sub tree
                temp = a[right]; 
                a[right] = a[left]; 
                a[left] = temp; 
            }
        }else{
            if(largest == left && smallest == right){
                temp = a[right]; 
                a[right] = a[left]; 
                a[left] = temp; 
                largest = right; 
            }
            if(largest == right && smallest == i){
                temp = a[right]; 
                a[right] = a[left]; 
                a[left] = temp; 
                largest = left; 
            }
            temp2 = a[i];
            a[i] = a[largest];
            a[largest] = temp2;
            maxheapify2(a, largest, heapsize);
        }
    }
}
